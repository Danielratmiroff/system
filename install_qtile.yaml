---
- name: Install Qtile using pipx
  hosts: localhost
  become: yes
  gather_facts: true
  vars:
    target_user: "{{ ansible_env.USER }}"
    pipx_command: "/usr/bin/pipx"
    qtile_package: "qtile"
    dotfile: "{{ ansible_env.HOME }}/dotfiles/qtile"
    qtile_dest: "{{ ansible_env.HOME }}/.config/qtile"

  tasks:
    - name: Ensure required system packages are installed (Debian/Ubuntu)
      apt:
        name:
          - python3
          - python3-pip
          - python3-venv
          - git
        state: present
        update_cache: yes
      when: ansible_os_family == "Debian"

    - name: Upgrade pip for the target user
      pip:
        name: pip
        state: latest
        executable: pip3
        user: yes
      become: false
      become_user: "{{ target_user }}"

    - name: Install pipx via pip for the target user
      pip:
        name: pipx
        state: latest
        executable: pip3
        user: yes
      become: false
      become_user: "{{ target_user }}"

    - name: Install Qtile using pipx for the target user
      command: "{{ pipx_command }} install {{ qtile_package }}"
      args:
        creates: "/home/{{ target_user }}/.local/bin/qtile"
      become: false
      become_user: "{{ target_user }}"

    - name: Verify Qtile installation
      command: "{{ pipx_command }} list"
      become: false
      become_user: "{{ target_user }}"
      register: pipx_list

    - name: Display pipx installed packages
      debug:
        msg: "{{ pipx_list.stdout }}"

    - name: Inject psutil into Qtile using pipx for the target user
      command: "{{ pipx_command }} inject {{ qtile_package }} psutil"
      become: false
      become_user: "{{ target_user }}"

    # Configuring Qtile
    - name: Checking if dotfiles are available in {{ dotfile }}
      stat:
        path: "{{ dotfile }}"
      register: dotfiles_available

    - name: "Getting all config files from {{ dotfile }}"
      find:
        paths: "{{ dotfile }}"
        patterns: "*"
        file_type: file
      register: config_files
      when: dotfiles_available.stat.exists and dotfiles_available.stat.isdir

    - name: "Copy config files to {{ qtile_dest }}"
      file:
        src: "{{ item.path }}"
        dest: "{{ dest }}/{{ item.path | basename }}"
        state: link
        force: yes
      loop: "{{ config_files.files }}"
      when: dotfiles_available.stat.exists and dotfiles_available.stat.isdir
