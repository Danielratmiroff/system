---
- name: Creating local bridge for multipass VMs 
  hosts: all
  vars:
    # Network
    - bridge_name: "localbr"
    - mac: "52:54:00:4b:ab:cd"
    - ip: "10.13.31.1/24"

    # Paths 
    - ssh_key_path: "{{ ansible_env.HOME }}/.ssh/multipass-ssh-key"
    - ssh_key_path_pub: "{{ ansible_env.HOME }}/.ssh/multipass-ssh-key.pub"
    - config_path: "{{ ansible_env.HOME }}/automation/config/"
    - config_file: "{{ config_path }}ssh-cloud-init.yaml"

  tasks:  
    # Create bridge network
    - name: Check if bridge network exists
      command:
        cmd: "ip -c -br addr show dev localbr"
      register: bridge_network
      ignore_errors: yes

    - name: "Creating a BRIDGE with config:"
      debug:
        msg: "name: {{ bridge_name }}, ip: {{ ip }}"
      when: bridge_network.rc != 0

    - name: Create a bridge network
      command:
        cmd: "nmcli connection add type bridge con-name {{ bridge_name }} ifname {{ bridge_name }} ipv4.method manual ipv4.addresses {{ ip }}"
      when: bridge_network.rc != 0

    - name: Check if bridge network was created
      command: 
        cmd: "ip -c -br addr show dev {{ bridge_name }}"
      register: bridge_network_created
      when: bridge_network.rc != 0
      failed_when: bridge_network_created.rc != 0

    # Install LXD 
    - name: Check if LXD is installed
      stat:
        path: /snap/bin/lxd
      register: lxd_installed

    - name: Installing LXD if not installed
      become: yes
      command: snap install lxd
      when: lxd_installed.stat.exists == False

    - name: Init LXD
      become: yes
      command: lxd init --auto
    
    - name: Check if LXD is running
      become: yes
      command: lxc list
      register: lxd_running
      failed_when: lxd_running.rc != 0

    # Set lxd as local driver
    - name: Checking multipass local.driver
      command: multipass get local.driver
      register: multipass_local_driver

    - name: Stopping all instances
      command: multipass stop --all
      when: multipass_local_driver.stdout != "lxd"

    - name: "Setting multipass local.driver to lxd"
      command: multipass set local.driver=lxd
      when: multipass_local_driver.stdout != "lxd"

    - name: Connecting multipass to LXD
      become: yes
      command: snap connect multipass:lxd lxd
      when: multipass_local_driver.stdout != "lxd"
